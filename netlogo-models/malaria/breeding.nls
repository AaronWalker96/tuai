;;Take a random set of bits and reverse them, simplified version of transpose from the binary genome mutation paper
to-report simple-swap-breed [genomeIn]
  let glength length genomeIn - 1
  
  let swap-start-point  random(glength)
  let swap-end-point (swap-start-point + random (glength - swap-start-point)) + 1

  let swap-partion reverse (sublist genomeIn swap-start-point swap-end-point)
  
  let swap-index 0
  let local-index swap-start-point
  let comp genomeIn
  
  loop
  [
    set comp replace-item local-index comp (item swap-index swap-partion)
    
    set swap-index swap-index + 1
    set local-index local-index + 1
    
    if local-index = swap-end-point [
      if length genomeIn != length comp [show "HAS BROKEN"]
      report comp]
  ]
end

;;Selects a random bit and flips it
to-report change-random-bit[genomeIn]
 let glength length genomeIn - 1
 let random-bit  random(glength)
 let bit item random-bit genomeIn

  ifelse bit = 1[set bit 0][set bit 1]

  show random-bit
  show genomeIn
  let newGenome replace-item random-bit genomeIn bit
  show newGenome

  report newGenome
end

;;Selectes a random bit and flips it n number of times
to-report change-random-bit-n-times[genomeIn n]
 let glength length genomeIn - 1
 let newGenome genomeIn
  repeat n [
    let random-bit  random(glength)
    let bit item random-bit genomeIn

    ifelse bit = 1[set bit 0][set bit 1]
    set newGenome replace-item random-bit newGenome bit
  ]
  report newGenome
end

;;Take a random specified length of bits and reverse them, simplified version of transpose from the binary genome mutation paper
to-report simple-swap-set-length-breed [genomeIn setlength]
  let glength length genomeIn - 1

  let swap-start-point  random(glength)
  let swap-end-point 0
  ifelse((swap-start-point <= (glength - setlength)))
  [
    set swap-end-point (swap-start-point + setlength)
  ]
  [
    set swap-end-point glength
  ]

  let swap-partion reverse (sublist genomeIn swap-start-point swap-end-point)

  let swap-index 0
  let local-index swap-start-point
  let comp genomeIn

  loop
  [
    set comp replace-item local-index comp (item swap-index swap-partion)

    set swap-index swap-index + 1
    set local-index local-index + 1

    if local-index = swap-end-point [
      if length genomeIn != length comp [show "HAS BROKEN"]
      report comp]
  ]
end
